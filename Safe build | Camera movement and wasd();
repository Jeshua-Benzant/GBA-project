/** CAMERA MOVEMENT TEST, KEYBOARD MOVEMENT SIMULATOR **/

/** PURPOSE: TO TRY AND PLAY AROUND WITH DIFFERENT CAMERA ANGLES WHILE KEEPING THE SCENE IN STEADY IN DIFFERENT AREAS OF SCENERY**/
/*

TODO:
1. Fix room scrolling for when sizes are radically different
2. Get started on boundries based on the rectangles (week 2/3);
*/

//starting map position through mapX & mapY values that map out the entire area as a counted number and tells the system what information about the rooms to use based on what room you're in
var mapX = 0;
var mapY = 0;
var GameMapX = [[800,800,600], //The size of each room 
           [600,1000,900]]; //that can be adjusted
var GameMapY = [[800,600,800], //however you want
[800,1000,800]];        //and the system will adjust all to it.
var Actual = {
    x: function() //adds up all the  x collision values starting from zero to current x Right collision
{
    var temp = 0;
    for(var i = 0; i <= mapX; i++)
    {
        temp += GameMapX[mapY][i];
    }
    return temp;
},
y:  function() //adds up all the  y collision values starting from zero to current y Bottom collision
{
    var temp = 0;
    for(var i = 0; i <= mapY; i++)
    {

        temp += GameMapY[i][mapX];
    }
    return temp;
},
}; //accounts for the accumulated x and y values based on where you are in the map.
var keys = [];//array for keyboard command movement (seen later down)
var lastCollision = {
    x: GameMapX[mapY][mapX], //checks for the most recently used
    y: GameMapY[mapY][mapX] ,
    };
//properties for the moving ellipse
var obj = {
    mapX: 300, //if you want to start in another room you must 
    mapY: 300, //write in the value between where the room is found( for now)
    width: 100,
    height: 100,
    ellipse: function(){
    },
};
//the sizes for each and every individual (when done) scene on the map ( - Must make an array for each corresponding aaamapX and mapY value - )
var Stationary = true; //variable that tells the camera whether the room is bigger than the actual canvas size.
var SceneMove = false; //variable that stops the ellipses' movement momentarily as the map adjusts (done on purpose)

//Properties and logic of the system
var scene = {
    sizeX: 0, //current room width
    sizeY: 0, //current room height
    
    //current camera movement of the scene 
    x: GameMapX[mapY][mapX],
    y: GameMapY[mapY][mapX]/height,
collision: { //collision detections
    RightX: 0,
    TopY: 0,
    LeftX: 0,
    BottomY: 0,
    width: 10, //width of detection range
    active: function(a,b) //active detection function (uses mapX & mapY)
    {
        if(Stationary) //stationary camera logic
        { 
            
            if(obj.mapX-scene.collision.LeftX > width/2 && 
            obj.mapX-scene.collision.RightX < -width/2)
           {
           
            //println("it works");
            scene.x = obj.mapX-width/2;
           
           }
           if( 
            (obj.mapY >scene.collision.TopY+height/2) && 
            (obj.mapY <scene.collision.BottomY- height/2))
           {
           
            //println("it works");
            scene.y = obj.mapY-height/2;
        }
        }
        
        //Right Scroll detection
        if(obj.mapX-(scene.collision.RightX)>=30)
        {
            
            Stationary = false;
            
                SceneMove = true;
                if(SceneMove)
                {
                scene.x+= cos(1)*8;
                //println("moving");
                    if(scene.x >= scene.collision.RightX)
                    {
                        SceneMove = false;
                        mapX++;
                       
                        
                        lastCollision.x += GameMapX[mapY][mapX];
                        if(scene.sizeX > width || scene.sizeY > height)
                        {
                        Stationary = true;
                        }
                    }
                }
        }
        
        //Bottom Scroll detection
        if(obj.mapY-(scene.collision.BottomY)>=30)
        {
            
            Stationary = false;
            
                SceneMove = true;
                if(SceneMove)
                {
                scene.y+= cos(1)*8;
                //println("moving");
                    if(scene.y >= scene.collision.BottomY)
                    {
                        SceneMove = false;
                        mapY++;
                       
                        
                        lastCollision.y += scene.collision.BottomY;
                        if(GameMapX[mapY][mapX] > width ||GameMapY[mapY][mapX] > height)
                        {
                        Stationary = true;
                        }
                    }
                }
        }
        //Top Scroll detection
        if((obj.mapY-scene.collision.TopY)<=-35 && mapY > 0)
        {
            Stationary = false;
                SceneMove = true;
                if(SceneMove)
                {
                    
                scene.y-= cos(1)*8;
                //println("top scroll");
                    if(scene.y <=scene.collision.TopY-width/*scene.sizeX*(a-1)*/)
                    {
                        mapY--;
                        SceneMove = false;
                        lastCollision.y -= scene.collision.TopY;
                        if(GameMapX[mapY][mapX] > width ||GameMapY[mapY][mapX] > height)
                        {
                        Stationary = true;
                        }
                        
                    }
                }
        }
        //Left Scroll detection
        if((obj.mapX-scene.collision.LeftX)<=-35 && mapX > 0)
        {
            Stationary = false;
                SceneMove = true;
                if(SceneMove)
                {
                    
                scene.x-= cos(1)*8;
                //println("moving");
                    if(scene.x <=scene.collision.LeftX-width/*scene.sizeX*(a-1)*/)
                    {
                        mapX--;
                        SceneMove = false;
                        lastCollision.x -= GameMapX[mapY][mapX];
                        if(GameMapX[mapY][mapX] > width ||GameMapY[mapY][mapX] > height)
                        {
                        Stationary = true;
                        }
                    }
                }
    }   },
}};
var limit = {
    x: function() //adds up all the  x collision values starting from zero to current x Right collision
{
    var temp = 0;
    for(var i = 0; i < GameMapX[mapY].length; i++)
    {
        temp += GameMapX[mapY][i];
        //println(temp);
    }
    return temp;
},
y: function() //adds up all the  x collision values starting from zero to current x Right collision
{
    var temp = 0;
    for(var i = 0; i < GameMapY.length; i++)
    {
        temp += GameMapY[i][mapX];
        //println(temp);
    }
    return temp;
},
};
//the circle that fill in as our test character
obj.ellipse = function(){
    ellipse(obj.mapX-scene.x,obj.mapY-scene.y,obj.width,obj.height);
};
//Logic for the key presses that in turn becomes the movement
var firstClick = []; //array used for when the key is only pressed once
keyPressed = function() {
    
    if (keys[keyCode]) {
        firstClick[keyCode] = false; //makes it false so that it is only one
    } else {
        firstClick[keyCode] = true; // first time you click
    }
    
    keys[keyCode] = true; //adds into the keys array as true
}; 
keyReleased = function() {
    keys[keyCode] = false; //gets rid of value from keys array by setting it as false
    firstClick[keyCode] = false; //makes it false so that it is only one
};
var wasd = function() //variable just to organize it and make it easier to access
{ if (!SceneMove)
{
        if(keys[68] && obj.mapX < limit.x()) //movement and borders
    {//println("it d");
        obj.mapX+= 3;
    }
    if(keys[65] && obj.mapX > 0)
    {//println("it a");
        obj.mapX-= 3;
    }
    if(keys[87] && obj.mapY > 0)
    {//println("it w");
        obj.mapY-= 3;
    }
    if(keys[83] && obj.mapY < limit.y())
    {//println("it s");
        obj.mapY+= 3;
    }
}
};
var collisions = function() //collisions and checks for any differences in the mapX and mapY values
{
    scene.sizeX  = GameMapX[mapY][mapX];
    scene.sizeY  = GameMapY[mapY][mapX];
    scene.collision.RightX = (Actual.x()-scene.collision.width) || 0;
scene.collision.TopY = (Actual.y()-scene.sizeY-scene.collision.width) || 0;
scene.collision.LeftX = (Actual.x()-scene.sizeX-scene.collision.width) || 0;
scene.collision.BottomY = (Actual.y()-scene.collision.width) || 0;
};
draw = function() {
    
    background(255,255,255);
    wasd();
    fill(255, 0, 0);
    //rect with alternating colors to identify different rooms throughout the the test run. I have only done 3 rooms as to display a quick showcase of the camera movement and and different room displays. If you wish to test with even more you will have to draw out the other rectangles themselves starting with either just -scene.x-10, which is just fancy talk for coordinate x = 0. or whichever room you want to do below. Here is the current format for ordering it on the X AND Y PLANES
/*
        0,0         GameMapX[0][0], 0    GameMap X[0][1], 0
0,GameMapY[0][0]   GameMapX[0][0],Y[0][1]   GameMapX[0][1],Y[0][2]

And so on. When this is implemented this will be removed and changed into a bitmap containing images to draw out the game's map*/
    rect(-10-scene.x,0-scene.y,GameMapX[0][0],GameMapY[0][0]);
    rect(limit.x()-GameMapX[0][2]-scene.x-10,0-scene.y,GameMapX[0][2],GameMapY[0][2]);
    rect(GameMapX[1][0]-scene.x-10,GameMapY[0][0]-scene.y,GameMapX[1][1],GameMapY[1][1]);
    
    fill(0,255,0);
     rect(GameMapX[0][0]-scene.x-10,0-scene.y,GameMapX[0][1],GameMapY[0][1]);
     rect(-scene.x-10,GameMapY[0][0]-scene.y,GameMapX[1][0],GameMapY[1][0]);
     rect(limit.x()-GameMapX[1][2]-scene.x-10,GameMapY[0][2]-scene.y,GameMapX[1][2],GameMapY[1][2]);

    collisions(); //collisions of the rooms
    scene.collision.active(mapX,mapY); //the use of those collisions
    fill(8, 8, 8);
    obj.ellipse(); //ellipse character and random rect     placed throughout several locations to prove that     camera is functioning
    //several rectangles scattered across to prove that the system is working 
    rect(100-scene.x,800-scene.y,100,100);
    rect(100-scene.x,100-scene.y,100,100);
    rect(1800-scene.x,0-scene.y,100,100);
    rect(800-scene.x,0-scene.y,100,100);
    
    
    /**** Final Test ( - NOT DONE - )
     * Find squares at coordinates:
     * (_,_),(_,_),(_,_), & (_,_),
****/


/** ACTIVE DEBUGGING **/
//println(obj.mapX-scene.collision.LeftX);
//println(obj.mapY);
//println(scene.x-width/2);
//println(limit.y());
//println(Stationary);
//println(mapX);
//println(mapY);
//println(obj.mapX-scene.collision.LeftX);
//println(scene.collision.RightX);
//println(GameMapY[mapY].length);
//println(Actual.y()-scene.sizeY-scene.collision.width);
//println(Actual.y()+scene.collision.width);
//println(Actual.y()-GameMapY[mapY][mapX]+scene.collision.width);
//println(scene.collision.TopY);
//println(lastCollision.x);
//println((obj.mapX-scene.collision.LeftX > width/2));
//println((obj.mapX-scene.collision.RightX < -width/2));
//println(scene.x);
};
