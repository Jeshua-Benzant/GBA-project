/** CAMERA MOVEMENT TEST AND KEYBOARD MOVEMENT SIMULATOR **/

/** PURPOSE: TO TRY AND PLAY AROUND WITH DIFFERENT CAMERA ANGLES WHILE KEEPING THE SCENE IN STEADY IN DIFFERENT AREAS OF SCENERY**/
/*mapX & mapY values that map out the entire area, 

TODO:
1. Finish up the stationary scrolling on the left side
2. Start and finsih transition from stationary scrolling to tradional scrolling
2. Setup mapX and mapY array values for maps - STARTED 4/6
3. Setup different Scene Sizes for those coordinates
4. Organize everything in a more concise manner with commenting
*/

//starting map position through mapX and mapY values
var mapX = 1;
var mapY = 0;
var GameMapX = [[800,800,600],
           [500,600,900]];
var GameMapY = [[600,800,800],
[500,600,900]];
//array for keyboard command movement (seen later down)
var keys = [];
var lastCollision = {
    x: GameMapX[mapY][mapX-1],
    y: 0 ,
    };
//properties for the moving ellipse
var obj = {
    mapX: 900,
    mapY: 300,
    width: 100,
    height: 100,
    ellipse: function(){
    },
};
//the sizes for each and every individual (when done) scene on the map ( - Must make an array for each corresponding mapX and mapY value - )
//variable to boolean the difference between stationary and traditional scrolling
var Stationary = false;
var SceneMove = false; //variable that stops the ellipses' movement momentarily as the map adjusts

//Properties and logic of the scenes
var scene = {
    sizeX: GameMapX[mapY][mapX],
    sizeY: GameMapY[mapY][mapX], 
    //current camera movement of the scene 
    x: GameMapX[mapY][mapX],
    y: GameMapY[mapY][mapX]/height,
collision: { //collision detections
    RightX: 0,
    TopY: 0,
    LeftX: 0,
    BottomY: 0,
    width: 10, //width of detection range
    active: function(a,b) //active detection function (uses mapX & mapY)
    {
        if(Stationary) //stationary camera logic
        { 
            
            if(scene.x+width < scene.collision.RightX && 
            (scene.x) > scene.collision.LeftX || 
            (obj.mapX >scene.collision.LeftX+width/2) && 
            (obj.mapX <scene.collision.RightX- width/2))
           {
           
            println("it works");
            scene.x = obj.mapX-width/2;
           
           }
           if(scene.y+width < scene.collision.BottomY && 
            (scene.y) > scene.collision.TopY || 
            (obj.mapY >scene.collision.TopY+height/2) && 
            (obj.mapY <scene.collision.BottomY- height/2))
           {
           
            println("it works");
            scene.y = obj.mapY-height/2;
        }
        }
        
        //Right Scroll detection
        if((obj.mapX-(scene.collision.RightX) )>=96+(scene.sizeX*(a)))
        {
            
            Stationary = false;
            
                SceneMove = true;
                if(SceneMove)
                {
                scene.x+= cos(1)*8;
                println("moving");
                    if(scene.x >=scene.sizeX*(a+1))
                    {
                        mapX++;
                        SceneMove = false;
                        lastCollision.x += scene.collision.RightX;
                    }
                }
        }
        //Bottom Scroll detection
        if((obj.mapY-scene.collision.BottomY)>=25+(scene.sizeY*(b)))
        {
            Stationary = false;
                SceneMove = true;
                if(SceneMove)
                {
                scene.y+= cos(1)*8;
                    if(scene.y >=scene.sizeX*(b+1))
                    {
                        mapY++;
                        SceneMove = false;
                    }
                }
        }
        //Top Scroll detection
        if((obj.mapY-scene.collision.TopY)<=-35+(scene.sizeY*(a-1)) && mapX > 0)
        {
            Stationary = false;
                SceneMove = true;
                if(SceneMove)
                {
                    
                scene.y-= cos(1)*8;
                println("moving");
                    if(scene.y <=lastCollision.y-width/*scene.sizeX*(a-1)*/)
                    {
                        mapY--;
                        SceneMove = false;
                        lastCollision.y -= scene.collision.TopY;
                        
                    }
                }
        }
        //Left Scroll detection
        if((obj.mapX-scene.collision.LeftX)<=-35+(scene.sizeX*(a-1)) && mapX > 0)
        {
            Stationary = false;
                SceneMove = true;
                if(SceneMove)
                {
                    
                scene.x-= cos(1)*8;
                println("moving");
                    if(scene.x <=lastCollision.x-width/*scene.sizeX*(a-1)*/)
                    {
                        mapX--;
                        SceneMove = false;
                        lastCollision.x -= scene.collision.LeftX;
                        if(GameMapY[mapY-1] === undefined && !Stationary)
                        {
                        scene.y = 0;
                        }
                    }
                }
        }
        if(GameMapX[mapY][mapX] > width ||GameMapY[mapY][mapX] > height)
{
    Stationary = true;
    println("stationary");
    
}
    },
}
};
fill(0,0,0);
//the circle that fill in as our test character
obj.ellipse = function(){
    ellipse(obj.mapX-scene.x,obj.mapY-scene.y,obj.width,obj.height);
};
//Logic for the key presses that in turn becomes the movement
var firstClick = []; //array used for when the key is only pressed once
keyPressed = function() {
    
    if (keys[keyCode]) {
        firstClick[keyCode] = false; //makes it false so that it is only one
    } else {
        firstClick[keyCode] = true; // first time you click
    }
    
    keys[keyCode] = true; //adds into the keys array as true
}; 
keyReleased = function() {
    keys[keyCode] = false; //gets rid of value from keys array by setting it as false
    firstClick[keyCode] = false; //makes it false so that it is only one
};
var wasd = function() //variable just to organize it and make it easier to access
{ if (!SceneMove)
{
        if(keys[68] )
    {//println("it d");
        obj.mapX+= 2;
    }
    if(keys[65])
    {//println("it a");
        obj.mapX-= 2;
    }
    if(keys[87])
    {//println("it w");
        obj.mapY-= 2;
    }
    if(keys[83])
    {//println("it s");
        obj.mapY+= 2;
    }
}
};
var collisions = function() //quick organization
{
    scene.collision.RightX = (GameMapX[mapY][mapX]+scene.collision.width) || 0;
scene.collision.TopY = (-scene.sizeY+scene.collision.width+height);
scene.collision.LeftX = (GameMapX[mapY][mapX-1]+scene.collision.width) || 0;
scene.collision.BottomY = (scene.sizeY-scene.collision.width);
scene.collision.LeftX = (GameMapX[mapY][mapX-1]-scene.collision.width || 0);
};
draw = function() {
    
    background(255,255,255);
    
    wasd();
    
    fill(255, 0, 0);
    rect(0-scene.x,scene.collision.TopY-scene.y,GameMapX[0][0],GameMapY[0][0]);
    
    fill(0,255,0);
     rect(800-scene.x,scene.collision.TopY-scene.y,GameMapX[0][1],GameMapY[0][1]);
    fill(8, 8, 8);
    scene.sizeX  = GameMapX[mapY][mapX];
    scene.sizeY  = GameMapY[mapY][mapX];
    collisions();
    scene.collision.active(mapX,mapY);
obj.ellipse(); //ellipse character and random rect placed throughout several locations to prove that camera is functioning
    //rect(scene.collision.LeftX,0,10,500);
    
    rect(100-scene.x,800-scene.y,100,100);
    rect(100-scene.x,100-scene.y,100,100);
    rect(-800-scene.x,0-scene.y,100,100);
    rect(800-scene.x,0-scene.y,100,100);
    
    
    /**** Final Test ( - NOT DONE - )
     * Find squares at coordinates:
     * (_,_),(_,_),(_,_), & (_,_),
****/


/** ACTIVE DEBUGGING **/
println(obj.mapX);
//println(obj.mapY);
//println(scene.x-width/2);
//println(-scene.y+width);
//println(Stationary);
println(mapX);
//println(mapY);
//println(obj.mapX-scene.collision.LeftX);
//println(scene.collision.RightX);
println(scene.y);
println(scene.sizeY);
//println(SceneMove);
//println(Stationary);
//println(scene.collision.RightX);
println(lastCollision.x);
};
